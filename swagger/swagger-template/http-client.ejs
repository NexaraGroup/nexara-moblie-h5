<%
const { apiConfig, generateResponses, config } = it;
%>
import {message as AntMessage} from 'antd';
import cookies from '@/utils/cookies';
import { logoutClean } from '@/utils/tool';
import type {
    Axios,
    AxiosInstance,
    AxiosRequestConfig,
    AxiosResponse,
    HeadersDefaults,
    ResponseType,
} from 'axios';
import axios from 'axios';

export type QueryParamsType = Record<string | number, any>;

export interface FullRequestConfig extends AxiosRequestConfig {
  /**
  * 是否显示默认的错误消息。
  * 如果设置为true，当请求发生错误时，将显示默认的错误消息。
  * 如果未设置或设置为false，将不显示默认的错误消息。
  */
  showDefaultErrorMessage?: boolean;
  /**
  * 是否显示默认的响应消息。
  * 如果设置为true，当请求成功时，将显示默认的响应消息。
  * 如果未设置或设置为false，将不显示默认的响应消息。
  */
  showDefaultResponseMessage?: boolean;
  /**
   * 忽略的响应错误代码列表。
   * 如果设置了此属性，那么在此列表中的响应错误代码将被忽略，不会触发错误处理。
   * 如果未设置此属性，所有的响应错误代码都会触发错误处理。
   */
  ignoreResponseErrorCodes?: string[];
  /**
  * 如果接口返回403，是否自动跳到登录页面
  */
  isLoginVerificationRequired?: boolean;
}

export interface FullResponse extends Omit<AxiosResponse, 'config'> {
  config: FullRequestConfig;
}

export interface FullRequestParams extends Omit<AxiosRequestConfig, "data" | "params" | "url" | "responseType"> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseType;
  /** request body */
  body?: unknown;
  /**
   * 是否显示默认的错误消息。
   * 如果设置为true，当请求发生错误时，将显示默认的错误消息。
   * 如果未设置或设置为false，将不显示默认的错误消息。
   */
  showDefaultErrorMessage?: boolean;
  /**
   * 是否显示默认的响应消息。
   * 如果设置为true，当请求成功时，将显示默认的响应消息。
   * 如果未设置或设置为false，将不显示默认的响应消息。
   */
  showDefaultResponseMessage?: boolean;
  /**
   * 忽略的响应错误代码列表。
   * 如果设置了此属性，那么在此列表中的响应错误代码将被忽略，不会触发错误处理。
   * 如果未设置此属性，所有的响应错误代码都会触发错误处理。
   */
  ignoreResponseErrorCodes?: string[];
  /**
   * 如果接口返回403，是否自动跳到登录页面
   */
  isLoginVerificationRequired?: boolean;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, "data" | "cancelToken"> {
  securityWorker?: (securityData: SecurityDataType | null) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;
  secure?: boolean;
  format?: ResponseType;
  autoSetHeaderToken?: boolean;
  ignoreGlobalResponseErrorCodes?: string[];
}

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

interface returnMsg{
  title: string
  content: string
}

const renderMsg = (code: number,message: string):returnMsg => {
  let msgTitle = '';
  let msgError=message;
  switch(code){
    case 999: msgTitle="Session expired";msgError="Your session has expired.Please login again.";break;
    case 10008: msgTitle="Your account has been locked.";msgError="Please try again in 2 hours.";break;
    case 10009: msgTitle="Your account has been locked.";msgError="";break;
    case 10010: msgTitle="Error";break;
    default: msgTitle="Error";
  } 
  return{
    title: msgTitle,
    content: msgError
  }        
}

export class HttpClient<SecurityDataType = unknown> {
    public instance: AxiosInstance;
    private securityData: SecurityDataType | null = null;
    private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
    private secure?: boolean;
    private format?: ResponseType;

    constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {
        this.instance = axios.create({ ...axiosConfig, baseURL: import.meta.env.VITE_APP_SERVER_IP_ADDR || "<%~ apiConfig.baseUrl %>", timeout: 15000 })
        this.instance.interceptors.request.use(
          config => {
            // config.withCredentials = true;
            return config;
          },
          error => {
            console.error(error);
            return Promise.reject(error);
          }
        );
        this.instance.interceptors.response.use(
          function (response) {
            const { data = {} } = response as FullResponse;
            const {code, message } = data;
            if (code !== 0) {
              const {title,content} = renderMsg(code, message)
              console.log(response, data,'data-----');
              AntMessage.error({
                content: content
              });
              if(code===-1) throw new Error(message);
            }
            return response;
          },
          function (error) {
            const {
              response:{
                status
              }
            } = error || {};
            console.log(error);
            if(status === 500){
              return Promise.reject(error?.message);
            }else if (error?.response) {
              if(status === 401){
                AntMessage.error({
                  content: 'Your session has expired.Please login again.'
                });
              }else{
                
              }
            }
            /**
             * TODO
             * 额外增加逻辑，401 直接去登录页，现这样吧，我看到上面有个所谓的配置项，但是全文没用到，这里写死
             */
            if (status === 401) {
              return Promise.reject(401);
            } else {
              return Promise.reject(error?.message);
            }
          },
        );
        this.secure = secure;
        this.format = format;
        this.securityWorker = securityWorker;
    }

    public setSecurityData = (data: SecurityDataType | null) => {
        this.securityData = data
    }

    protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {
      const method = params1.method || (params2 && params2.method)

      return {
        ...this.instance.defaults,
        ...params1,
        ...(params2 || {}),
        headers: {
          ...((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}),
          ...(params1.headers || {}),
          ...((params2 && params2.headers) || {}),
        },
      };
    }

    protected stringifyFormItem(formItem: unknown) {
      if (typeof formItem === "object" && formItem !== null) {
        return JSON.stringify(formItem);
      } else {
        return `${formItem}`;
      }
    }

    protected createFormData(input: Record<string, unknown>): FormData {
      return Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        const propertyContent: any[] = (property instanceof Array) ? property : [property]

        for (const formItem of propertyContent) {
          const isFileType = formItem instanceof Blob || formItem instanceof File;
          formData.append(
            key,
            isFileType ? formItem : this.stringifyFormItem(formItem)
            );
        }

        return formData;
      }, new FormData());
    }

    public get: Axios['get'] = (url, options) => {
        return this.instance
            .request({
            method: 'GET',
            url,
            ...options,
        })
        .then((response) => response.data);
    };

    public post: Axios['post'] = (url, data, config) => {
        return this.instance
            .request({
            method: 'POST',
            url,
            data,
            ...config,
        })
        .then((response) => response.data);
    };

    public request = async <T = any, _E = any>({
        secure,
        path,
        type,
        query,
        format,
        body,
        ...params
<% if (config.unwrapResponseData) { %>
    }: FullRequestParams): Promise<T> => {
<% } else { %>
    }: FullRequestParams): Promise<AxiosResponse<T>> => {
<% } %>
        const secureParams = ((typeof secure === 'boolean' ? secure : this.secure) && this.securityWorker && (await this.securityWorker(this.securityData))) || {};
        const requestParams = this.mergeRequestParams(params, secureParams);
        const responseFormat = (format || this.format) || undefined;

        if (type === ContentType.FormData && body && body !== null && typeof body === "object") {
          body = this.createFormData(body as Record<string, unknown>);
        }

        if (type === ContentType.Text && body && body !== null && typeof body !== "string") {
          body = JSON.stringify(body);
        }

        const headers={
          ...(requestParams.headers || {}),
          ...(type ? { "Content-Type": type } : { 'Content-Type': ContentType.Json }),
      }

        const Custody_User_Token = localStorage.getItem('Custody_User_Token')
        if (Custody_User_Token) {
          headers.Authorization = `Bearer ${Custody_User_Token}`
        }

        return this.instance.request({
            ...requestParams,
            headers,
            params: query,
            responseType: responseFormat,
            data: body,
            url: path,
<% if (config.unwrapResponseData) { %>
        })
        .then(response => response.data)
        .catch((error) => {
          /**
           * TODO
           * 额外增加逻辑，401 直接去登录页，现这样吧，我看到上面有个所谓的配置项，但是全文没用到，这里写死
           */
          if (error === 401) {
            location.replace("//" + location.host + "/log-in");
            return Promise.reject(error);
          }
          return Promise.reject(error);
        });
<% } else { %>
        });
<% } %>
    };
}
